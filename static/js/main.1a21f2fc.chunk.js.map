{"version":3,"sources":["componentes/Pelicula.jsx","componentes/PeliculasList.jsx","componentes/PeliculaForm.jsx","componentes/Footer.jsx","componentes/index.jsx","serviceWorker.js","index.js"],"names":["Pelicula","props","react_default","a","createElement","className","src","imagen","alt","nombre","type","PeliculasList","peliculas","map","peli","componentes_Pelicula","key","id","PeliculaForm","onSubmit","onAddPelicula","placeholder","name","required","value","uid","Footer","href","App","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","handleOnAddPelicula","bind","assertThisInitialized","fetchData","resetData","e","_this2","preventDefault","form","target","fetch","titulo","then","response","json","result","pelicula","Title","rating","imdbRating","votos","imdbVotes","Poster","setState","role","componentes_PeliculaForm","componentes_PeliculasList","componentes_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","componentes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAqBeA,EAnBE,SAACC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKL,EAAMM,OAAQC,IAAI,mBACrDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaJ,EAAMQ,QAChCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,oCAAhC,QACAH,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,oCAAhC,cCYDM,EArBQ,SAACV,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXJ,EAAMW,UAAUC,IAAK,SAAAC,GAAI,OACrBZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EAAKG,GACVA,GAAIH,EAAKG,GACTR,OAAQK,EAAKL,OACbF,OAAQO,EAAKP,sBCI1BW,EAfM,SAACjB,GAClB,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,yBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMe,SAAUlB,EAAMmB,eAClBlB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOW,YAAY,wBAAwBC,KAAK,SAASC,UAAQ,IAC7ErB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASY,KAAK,KAAKE,MAAOC,YAAI,MAC1CvB,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASc,MAAM,aAE/BtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,0LCGDqB,EAbC,SAACzB,GACb,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGuB,KAAK,KAAR,gBAEAzB,EAAAC,EAAAC,cAAA,gCC+DDwB,cAjEX,SAAAA,IAAqB,IAAAC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAANnC,EAAM,IAAAoC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAANrC,EAAMqC,GAAAH,UAAAG,GAAA,OACjBR,EAAAC,OAAAQ,EAAA,EAAAR,CAAAE,MAAAJ,EAAAE,OAAAS,EAAA,EAAAT,CAAAH,IAAAa,KAAAC,MAAAb,EAAA,CAAAI,MAAAU,OAAS1C,MAEJ2C,MAAQ,CACThC,UAAW,IAGfkB,EAAKe,oBAAsBf,EAAKe,oBAAoBC,KAAzBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAC3BA,EAAKkB,UAAYlB,EAAKkB,UAAUF,KAAff,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KACjBA,EAAKmB,UAAYnB,EAAKmB,UAAUH,KAAff,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KATAA,mFAYDoB,GAAE,IAAAC,EAAAlB,KAClBiB,EAAEE,iBAEF,IAAIC,EAAOH,EAAEI,OAEbC,MAAM,8CAAgDF,EAAKG,OAAOhC,OACjEiC,KAAM,SAAAC,GAAQ,OAAKA,EAASC,SAC5BF,KAAM,SAAAG,GACH,IAAIC,EAAW,CACX5C,GAAIoC,EAAKpC,GAAGO,MACZf,OAAQmD,EAAOE,MACfC,OAAQH,EAAOI,WACfC,MAAOL,EAAOM,UACd3D,OAAQqD,EAAOO,QAEnBhB,EAAKiB,SAAS,CACVxD,UAAWuC,EAAKP,MAAMhC,UAAU+B,OAAO,CAACkB,iFAiBhD5B,KAAKmC,SAAU,CAAExD,UAAW,mFAQ5B,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMiE,KAAK,QACPnE,EAAAC,EAAAC,cAACkE,EAAD,CAAclD,cAAiBa,KAAKY,sBACpC3C,EAAAC,EAAAC,cAACmE,EAAD,CAAe3D,UAAWqB,KAAKW,MAAMhC,aAEzCV,EAAAC,EAAAC,cAACoE,EAAD,cA5DEC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.1a21f2fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Pelicula = (props) => {\r\n    return (\r\n        <div className=\"col-md-2\">\r\n        <div className=\"card mb-4 box-shadow\">\r\n            <img className=\"card-img-top\" src={props.imagen} alt=\"Card image cap\"/>\r\n            <div className=\"card-body\">\r\n            <p className=\"card-text\">{props.nombre}</p>\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n                <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">View</button>\r\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Edit</button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pelicula","import React from 'react'\r\nimport Pelicula from './Pelicula'\r\n\r\n const PeliculasList = (props) => {\r\n    return (\r\n        <div className=\"album py-5 bg-light\">\r\n            <div className=\"container\">       \r\n                <div className=\"row\">\r\n                {\r\n                    props.peliculas.map( peli => (\r\n                        <Pelicula \r\n                            key={peli.id}\r\n                            id={peli.id}\r\n                            nombre={peli.nombre}\r\n                            imagen={peli.imagen}\r\n                        />\r\n                    ))\r\n                }\r\n                </div>      \r\n            </div>\r\n        </div>\r\n    )\r\n }\r\n\r\nexport default PeliculasList","import React from 'react'\r\nimport uid from 'uid'\r\n\r\nconst PeliculaForm = (props) => {\r\n    return (\r\n        <section className=\"jumbotron text-center\">\r\n            <div className=\"container\">\r\n                <form onSubmit={props.onAddPelicula}>\r\n                    <input type=\"text\" placeholder=\"Nombre de la pelicula\" name=\"titulo\" required></input>\r\n                    <input type=\"hidden\" name=\"id\" value={uid(10)}></input>\r\n                    <input type=\"submit\" value=\"aceptar\"></input>\r\n                </form>\r\n                <p className=\"lead text-muted\">Something short and leading about the collection belowâ€”its contents, the creator, etc. Make it short and sweet, but not too short so folks don't simply skip over it entirely.</p> \r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PeliculaForm","import React from 'react'\r\n\r\n const Footer = (props) => {\r\n    return (\r\n        <footer className=\"text-muted\">\r\n            <div className=\"container\">\r\n                <p className=\"float-right\">\r\n                <a href=\"#\">Back to top</a>\r\n                </p>\r\n                <p>Texto del footer</p>\r\n            </div>\r\n        </footer>\r\n    )\r\n }\r\n\r\nexport default Footer","import React, { Component } from 'react'\r\nimport PeliculasList from './PeliculasList'\r\nimport PeliculaForm from './PeliculaForm'\r\nimport Footer from './Footer'\r\n//import { cursos } from '../datos/cursos.json'\r\n\r\nclass App extends Component{\r\n    constructor(...props){\r\n        super(...props)\r\n\r\n        this.state = {\r\n            peliculas: []\r\n        }\r\n\r\n        this.handleOnAddPelicula = this.handleOnAddPelicula.bind(this)\r\n        this.fetchData = this.fetchData.bind(this)\r\n        this.resetData = this.resetData.bind(this)\r\n    }\r\n\r\n    handleOnAddPelicula(e){\r\n        e.preventDefault()\r\n\r\n        let form = e.target\r\n\r\n        fetch('https://www.omdbapi.com/?apikey=34ebed09&t=' + form.titulo.value)\r\n        .then( response => (response.json()))\r\n        .then( result => {\r\n            let pelicula = {\r\n                id: form.id.value,\r\n                nombre: result.Title,\r\n                rating: result.imdbRating,\r\n                votos: result.imdbVotes,\r\n                imagen: result.Poster,\r\n            }\r\n            this.setState({\r\n                peliculas: this.state.peliculas.concat([pelicula])\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    fetchData() { \r\n        //setTimeout(() => this.setState({ courses: cursos }), 2000)\r\n\r\n        /*fetch('https://restcountries.eu/rest/v1/all')\r\n        .then( response => (response.json()))\r\n        .then( result => {\r\n            console.log(result)\r\n        })*/\r\n    }\r\n\r\n    resetData() {\r\n        this.setState( { peliculas: [] } )\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.fetchData()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <main role=\"main\">\r\n                    <PeliculaForm onAddPelicula = {this.handleOnAddPelicula} />\r\n                    <PeliculasList peliculas={this.state.peliculas} />\r\n                </main>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './componentes/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}